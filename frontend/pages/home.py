import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import json
import requests

BACKEND_API = "http://127.0.0.1:5000"

# ƒê·ªïi tr·∫°ng th√°i khi nh·∫•n n√∫t
def toggle_favorite():
    st.session_state.favorite = not st.session_state.favorite

# H√†m t·∫°o c√°c m·ª•c trong b·ªØa ƒÉn
@st.dialog("Chi ti·∫øt m√≥n ƒÉn", width="large")
def details(id):
    get_all_api = BACKEND_API + "/api/recipes/detail"
    response = requests.get(get_all_api, data=json.dumps({"recipe_id": id}), headers = {
        'Content-Type': 'application/json',
    })
    print(response.status_code)
    print(response.json())

    st.session_state.food_details =  response.json()["data"]

    st.header(st.session_state.food_details["name"], divider="grey")
    col1, col2 = st.columns([35,65])

    with col1:
        st.image(st.session_state.food_details["image"], use_container_width=True)

        rating = st.session_state.food_details["rating"]
        if rating < 1.5:
            with st.container(border=True):
                st.write("**ƒê√°nh gi√°**" + ": ‚≠ê ")
                st.write(f"({rating} / 5.0)")
        elif rating >= 1.5 and rating < 2.5:
            with st.container(border=True):
                st.write("**ƒê√°nh gi√°**" + ": ‚≠ê‚≠ê ")
                st.write(f"({rating} / 5.0)")
        elif rating >= 2.5 and rating < 3.5:
            with st.container(border=True):
                st.write("**ƒê√°nh gi√°**" + ": ‚≠ê‚≠ê‚≠ê ")
                st.write(f"({rating} / 5.0)")
        elif rating >= 3.5 and rating < 4.5:
            with st.container(border=True):
                st.write("**ƒê√°nh gi√°**" + ": ‚≠ê‚≠ê‚≠ê‚≠ê ")
                st.write(f"({rating} / 5.0)")
        elif rating > 4.5:
            with st.container(border=True):
                st.write("**ƒê√°nh gi√°**" + ": ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ")
                st.write(f"({rating} / 5.0)")

        rating =  st.button("Rating", use_container_width=True)
        if rating:
            with st.form("Rating"):
                sentiment_mapping = ["one", "two", "three", "four", "five"]
                selected = st.feedback("stars")
                st.form_submit_button('Submit', type='primary')

        # D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì tr√≤n
        labels = ['Carbs', 'Fats', 'Protein']
        values = [st.session_state.food_details["carbs"], st.session_state.food_details["fat"], st.session_state.food_details["protein"]]

        st.write("**Chi ti·∫øt dinh d∆∞·ª°ng**")
        # T·∫°o bi·ªÉu ƒë·ªì tr√≤n v·ªõi plotly
        fig = go.Figure(data=[go.Pie(labels=labels, values=values)])
        # T√πy ch·ªânh bi·ªÉu ƒë·ªì tr√≤n
        fig.update_traces(
            hoverinfo='label+percent',
            textinfo='label+percent',  # Ch·ªâ hi·ªÉn th·ªã t√™n th√†nh ph·∫ßn
            textfont=dict(size=10, color='white', family='Arial Black'),
            marker=dict(colors=['#FFCC00', '#66b3ff', '#9933CC']),  # M√†u s·∫Øc cho c√°c th√†nh ph·∫ßn
            showlegend=False
        )
        fig.update_layout(
            margin=dict(t=10, b=10, l=10, r=10),
            width=300,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            height=300  # ƒê·ªô cao bi·ªÉu ƒë·ªì
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
        st.plotly_chart(fig)

        with st.container(border=True):
            c1, c2 = st.columns([6, 4])

            with c1:
                st.write("Total calories")
                st.write("Carbs")
                st.write("Fat")
                st.write("Protein")

            with c2:
                st.write(f"{st.session_state.food_details["calories"]} cals")
                st.write(f"{st.session_state.food_details["carbs"]} g")
                st.write(f"{st.session_state.food_details["fat"]} g")
                st.write(f"{st.session_state.food_details["protein"]} g")

    with col2:
        with st.container(border=True):
            st.write("**Th·ªùi gian n·∫•u**" + f": {st.session_state.food_details["cooking_time"]} ph√∫t")

            st.text("")

            st.subheader("Nguy√™n li·ªáu")
            for idx, ingredients in enumerate(st.session_state.food_details["ingredients"]):
                st.write(f" - {ingredients["name"]} {ingredients["quantity"]} {ingredients["unit"]}")
            
            st.text("")
            
            st.subheader("C√°ch l√†m")
            for idx, steps in enumerate(st.session_state.food_details["steps"]):
                st.write(f" - {steps}")
            # Video
            # st.markdown("[Xem h∆∞·ªõng d·∫´n chi ti·∫øt qua video](https://youtu.be/QJZUwiJhKZ0?si=IO1AvQjjiCk6GzLO)")

# H√†m hi·ªÉn th·ªã t·ª´ng m√≥n ƒÉn trong b·ªØa
def display_meal(meal, day):
    for idx in range(0, len(st.session_state.weekly_menu[day][meal]["listOfFoods"]), 2):
        c1, c2 = st.columns(2)

        # First food item in the current pair (idx)
        food1 = st.session_state.weekly_menu[day][meal]["listOfFoods"][idx]
        with c1:
            with st.container(border=True):
                col1, col2, col3 = st.columns([20, 45, 25], vertical_alignment="center")
                with col1:
                    with st.container(height=50, border=False):
                        st.image(food1["image"], use_container_width=True)
                with col2:
                    st.write(f"**{food1["name"]}**")
                with col3:
                    # Using an f-string for the key with escaped quotes
                    if st.button("Chi ti·∫øt", key=f"{day}_{meal}_{food1['name']}_{idx}"):
                        details(food1["recipe_id"])

        # Second food item in the current pair (idx + 1), if it exists
        if idx + 1 < len(st.session_state.weekly_menu[day][meal]["listOfFoods"]):
            food2 = st.session_state.weekly_menu[day][meal]["listOfFoods"][idx + 1]
            with c2:
                with st.container(border=True):
                    col1, col2, col3 = st.columns([20, 45, 25], vertical_alignment="center")
                    with col1:
                        with st.container(height=50, border=False):
                            st.image(food2["image"], use_container_width=True)
                    with col2:
                        st.write(f"**{food2["name"]}**")
                    with col3:
                        # Using an f-string for the key with escaped quotes
                        if st.button("Chi ti·∫øt", key=f"{day}_{meal}_{food2['name']}_{idx + 1}"):
                            details(food2["recipe_id"])

if st.session_state.logged_in:

    #Chart
    get_all_api = BACKEND_API + "/api/home/chart"
    response = requests.get(
        get_all_api,
        data=json.dumps(
            {
                "user_id": st.session_state.user["id"]
            }
        ),
        headers = {'Content-Type': 'application/json',}
    )
    print(response.status_code)
    if response.status_code == 200:
        st.session_state.user["absorbed_carbs"] = response.json()["data"]["chart"]["absorbedCarbs"]
        st.session_state.user["absorbed_protein"] = response.json()["data"]["chart"]["absorbedProtein"]
        st.session_state.user["absorbed_fat"] = response.json()["data"]["chart"]["absorbedFat"]
        st.session_state.user["absorbed_calories"] = response.json()["data"]["chart"]["absorbedCalories"]
        st.session_state.user["target_carbs"] = response.json()["data"]["chart"]["goalCarbs"]
        st.session_state.user["target_protein"] = response.json()["data"]["chart"]["goalProtein"]
        st.session_state.user["target_fat"] = response.json()["data"]["chart"]["goalFat"]
        st.session_state.user["target_calories"] = response.json()["data"]["chart"]["goalCalories"]

    #Weekly menu:
    get_all_api = BACKEND_API + "/api/weekly_menu"
    response = requests.get(
        get_all_api,
        data=json.dumps(
            {
                "user_id": st.session_state.user["id"]
            }
        ),
        headers = {'Content-Type': 'application/json',}
    )
    print(response.status_code)
    if response.status_code == 200:
        date1 = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        date2 = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
        meal = ["Breakfast", "Lunch", "Dinner"]
        for i, day in enumerate(date1):
            for j, meal_type in enumerate(meal):
                st.session_state.weekly_menu[day][meal_type]["listOfFoods"] = response.json()["data"]["menu"][date2[i]][meal_type.lower()]

        

    st.title(f"Ch√†o m·ª´ng {st.session_state.user["fullname"]}! H√¥m nay b·∫°n mu·ªën ƒÉn g√¨?")
    st.text("")
    st.subheader("**üìà Ch·ªâ s·ªë dinh d∆∞·ª°ng c·ªßa b·∫°n:**")

    def create_pie_chart(current, goal, label, color):
        labels = ['done', 'notDone']
        sizes = [current/goal, 1 - current/goal]
        pie_chart = px.pie(names=labels, values=sizes, color_discrete_sequence=[color, '#C0C0C0'], hole=0.7)
        pie_chart.update_layout(
            annotations=[dict(text=f"{current}/{goal}<br>{label}", x=0.5, y=0.5, font_size=22, showarrow=False)],
            showlegend=False,
            width=180,
            height=180,
            margin=dict(t=0, b=0, l=0, r=0)
        )
        pie_chart.update_traces(textinfo='none', sort=False)
        return pie_chart

    # Generate charts
    pie_calories = create_pie_chart(st.session_state.user["absorbed_calories"], st.session_state.user["target_calories"], 'calories', '#DC143C')
    pie_carbs = create_pie_chart(st.session_state.user["absorbed_carbs"], st.session_state.user["target_carbs"], 'carbs', '#FA8072')
    pie_fat = create_pie_chart(st.session_state.user["absorbed_fat"], st.session_state.user["target_fat"], 'fat', '#66b3ff')
    pie_protein = create_pie_chart(st.session_state.user["absorbed_protein"], st.session_state.user["target_protein"], 'protein', '#9933CC')

    # Display in a grid
    with st.container(border=True):
        col1, col2, col3, col4 = st.columns(4)
        col1.plotly_chart(pie_calories, use_container_width=True)
        col2.plotly_chart(pie_carbs, use_container_width=True)
        col3.plotly_chart(pie_fat, use_container_width=True)
        col4.plotly_chart(pie_protein, use_container_width=True)

    st.text("")
    st.text("")
    st.subheader("**üìÑ Th·ª±c ƒë∆°n b·ªØa ƒÉn ti·∫øp theo:**")

    display_meal(st.session_state.meal, st.session_state.day_of_week)

    thuc_don = st.button("Theo d√µi th·ª±c ƒë∆°n c·ªßa b·∫°n", use_container_width=True, type="primary")
    if thuc_don:
                st.switch_page("pages/features/weeklyMenu.py")

    st.text("")
    st.text("")
    st.subheader("H√£y c√πng nhau n·∫•u m·ªôt b·ªØa th·∫≠t ngon n√†o!")
    st.text("")

    with st.container(border=True):
        col1, col2 = st.columns([0.4, 0.6], vertical_alignment="center")

        with col1:
            st.image("features_images/weeklyMenu.jpg")

        with col2:
            st.write("**Weekly Menu**")
            st.write("B·∫°n ch∆∞a bi·∫øt h√¥m nay m√¨nh s·∫Ω ƒÉn g√¨, ng√†y mai m√¨nh s·∫Ω ƒÉn g√¨? B·∫°n kh√¥ng bi·∫øt l√†m c√°ch n√†o ƒë·ªÉ c√≥ m·ªôt b·ªØa ƒÉn th·∫≠t Healthy? Ch·ªâ c·∫ßn nh·∫•p chu·ªôt m·ªôt l·∫ßn, b·∫°n ƒë√£ c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c m·ªôt th·ª±c ƒë∆°n Healthy nh∆∞ b·∫°n mong mu·ªën m√† kh√¥ng c·∫ßn ph·∫£i suy nghƒ© ƒë·∫Øn ƒëo.")
        
        weeklyMenu_button = st.button("T·∫°o m·ªôt th·ª±c ƒë∆°n th·∫≠t Healthy!", use_container_width=True)
        if weeklyMenu_button:
            st.switch_page("pages/features/weeklyMenu.py")

    st.text("")

    with st.container(border=True):
        col1, col2 = st.columns([0.6, 0.4], vertical_alignment="center")

        with col2:
            st.image("features_images/recipes.jpg")

        with col1:
            st.write("**Recipes**")
            st.write("N∆°i ƒë√¢y l√† m·ªôt b√°ch khoa to√†n th∆∞ v·ªÅ c√°c m√≥n ƒÉn, c√°c b·∫°n c√≥ th·ªÉ t√¨m ki·∫øm nh·ªØng m√≥n ƒÉn m√¨nh y√™u th√≠ch, tham kh·∫£o chi ti·∫øt h√†m l∆∞·ª£ng dinh d∆∞·ª°ng c·ªßa m√≥n ƒÉn ƒë√≥. ƒê·∫∑c bi·ªát, NutriHome h∆∞·ªõng d·∫´n c√°c b·∫°n n·∫•u ƒÉn m·ªôt c√°ch t·ªâ m·ªâ v√† chi ti·∫øt th√¥ng qu√° t·ª´ng b∆∞·ªõc.")
        
        recipes_button = st.button("ƒê·∫øn xem nh·ªØng c√¥ng th·ª©c n·∫•u ƒÉn tuy·ªát ƒë·ªânh n√†o!", use_container_width=True)
        if recipes_button:
            st.switch_page("pages/features/recipes.py")

    st.text("")
    
    with st.container(border=True):
        col1, col2 = st.columns([0.4, 0.6], vertical_alignment="center")

        with col1:
            st.image("features_images/history.jpg")

        with col2:
            st.write("**History**")
            st.write("B·∫°n c√≥ th·ªÉ xem l·∫°i l·ªãch s·ª≠ ƒÉn u·ªëng c·ªßa b·∫£n th√¢n trong 3 ng√†y v·ª´a qua. T·∫°i ƒë√¢y NutriHome s·∫Ω t√≠nh to√°n chi ti·∫øt h√†m l∆∞·ª£ng m√† c√°c b·∫°n ƒë√£ h·∫•p th·ª•, ƒë∆∞a ra nh·ªØng th√¥ng s·ªë c·ª• th·ªÉ ƒë·ªÉ c√°c b·∫°n c√≥ th·ªÉ tham kh·∫£o m·ªôt c√°ch tr·ª±c quan nh·∫•t.")
        
        history_button = st.button("ƒê·∫øn xem h√¥m nay b·∫°n ƒë√£ ƒÉn nh·ªØng g√¨ n√†o!", use_container_width=True)
        if history_button:
            st.switch_page("pages/features/history.py")

    st.text("")
    
    with st.container(border=True):
        col1, col2 = st.columns([0.6, 0.4], vertical_alignment="center")

        with col2:
            st.image("features_images/community.jpg")

        with col1:
            st.write("**Community**")
            st.write("ƒê√¢y l√† m·ªôt c·ªông ƒë·ªìng, n∆°i c√°c b·∫°n c√≥ th·ªÉ chia s·∫ª cho nhau nh·ªØng m√≥n ƒÉn v√† c√¥ng th·ª©c n·∫•u ƒÉn ƒë·ªôc ƒë√°o m√† c√°c b·∫°n kh√°m ph√° ra. ƒê·ªìng th·ªùi, c√°c b·∫°n c√≥ th·ªÉ l∆∞u l·∫°i nh·ªØng c√¥ng th·ª©c m√† c√°c b·∫°n y√™u th√≠ch ho·∫∑c t√¢m ƒë·∫Øc.")
        
        community_button = st.button("H√£y c√πng chia s·∫ª nh·ªØng c√¥ng th·ª©c n·∫•u ƒÉn m√† b·∫°n ƒë√£ kh√°m ph√° ra nh√©!", use_container_width=True)
        if community_button:
            st.switch_page("pages/features/community.py")

    # What's new (later)
    # st.text("")
    # st.text("")
    # st.subheader("C√≥ g√¨ m·ªõi", divider="gray")
    # st.text("")
    # col1, col2, col3 = st.columns([1, 1, 1], gap = "small", vertical_alignment="top")

    # with col1:
    #     with st.form("com1"):
    #         st.image("features_images/ex.jpg")
    #         st.write("**C√¥ng th·ª©c n·∫•u ngon tuy·ªát**")
    #         st.write("C√¥ng th·ª©c n·∫•u ngon tuy·ªát ƒë∆∞·ª£c ph√°t hi·ªán b·ªüi NPNLong")
    #         switch_page = st.form_submit_button("Xem ngay", use_container_width=True)
    #         if switch_page:
    #              st.switch_page("pages/features/community.py")

    # with col2:
    #     with st.form("com2"):
    #         st.image("features_images/ex.jpg")
    #         st.write("**C√¥ng th·ª©c n·∫•u tuy·ªát ngon**")
    #         st.write("C√¥ng th·ª©c n·∫•u ngon tuy·ªát ƒë∆∞·ª£c ph√°t hi·ªán b·ªüi LongNPN")
    #         switch_page = st.form_submit_button("Xem ngay", use_container_width=True)
    #         if switch_page:
    #              st.switch_page("pages/features/community.py")

    # with col3:
    #     with st.form("com3"):
    #         st.image("features_images/ex.jpg")
    #         st.write("**C√¥ng th·ª©c n·∫•u ƒë·ªôc l·∫° B√¨nh D∆∞∆°ng**")
    #         st.write("C√¥ng th·ª©c n·∫•u ngon tuy·ªát ƒë∆∞·ª£c ph√°t hi·ªán b·ªüi kemngott")
    #         switch_page = st.form_submit_button("Xem ngay", use_container_width=True)
    #         if switch_page:
    #              st.switch_page("pages/features/community.py")

else:
    st.title("Ch√†o m·ª´ng!")
    st.text("")
    st.write("NutriHome l√† ·ª©ng d·ª•ng t∆∞ v·∫•n dinh d∆∞·ª°ng th√¥ng minh, s·ª≠ d·ª•ng AI ƒë·ªÉ t√≠nh to√°n ch√≠nh x√°c nhu c·∫ßu dinh d∆∞·ª°ng c√° nh√¢n. ·ª®ng d·ª•ng t·∫°o th·ª±c ƒë∆°n t√πy ch·ªânh theo s·ªü th√≠ch v√† theo d√µi l·ªãch s·ª≠ ƒÉn u·ªëng c·ªßa ng∆∞·ªùi d√πng, gi√∫p duy tr√¨ th√≥i quen ƒÉn u·ªëng l√†nh m·∫°nh.")
    
    st.text("")
    st.text("")

    with st.container(border=True):
        st.subheader("B·∫°n ch∆∞a bi·∫øt h√¥m nay s·∫Ω ƒÉn g√¨? B·∫°n mu·ªën t·∫°o m·ªôt th·ª±c ƒë∆°n th·∫≠t Healthy? H√£y c√πng b·∫Øt ƒë·∫ßu v·ªõi ch√∫ng t√¥i!")
        st.text("")
        login = st.button("T·∫°o th·ª±c ƒë∆°n ngay!", type="primary", use_container_width = True)

        if login:
            st.session_state.login_page = True
            st.rerun()

    st.text("")
    st.text("")
    st.subheader("NutriHome s·∫Ω ƒëem l·∫°i cho b·∫°n nh·ªØng g√¨?")
    st.text("")

    with st.container(border=True):
        col1, col2 = st.columns([0.4, 0.6], vertical_alignment="center")

        with col1:
            st.image("features_images/weeklyMenu.jpg")

        with col2:
            st.write("**Weekly Menu**")
            st.write("B·∫°n ch∆∞a bi·∫øt h√¥m nay m√¨nh s·∫Ω ƒÉn g√¨, ng√†y mai m√¨nh s·∫Ω ƒÉn g√¨? B·∫°n kh√¥ng bi·∫øt l√†m c√°ch n√†o ƒë·ªÉ c√≥ m·ªôt b·ªØa ƒÉn th·∫≠t Healthy? Ch·ªâ c·∫ßn nh·∫•p chu·ªôt m·ªôt l·∫ßn, b·∫°n ƒë√£ c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c m·ªôt th·ª±c ƒë∆°n Healthy nh∆∞ b·∫°n mong mu·ªën m√† kh√¥ng c·∫ßn ph·∫£i suy nghƒ© ƒë·∫Øn ƒëo.")

    st.text("")

    with st.container(border=True):
        col1, col2 = st.columns([0.6, 0.4], vertical_alignment="center")

        with col2:
            st.image("features_images/recipes.jpg")

        with col1:
            st.write("**Recipes**")
            st.write("N∆°i ƒë√¢y l√† m·ªôt b√°ch khoa to√†n th∆∞ v·ªÅ c√°c m√≥n ƒÉn, c√°c b·∫°n c√≥ th·ªÉ t√¨m ki·∫øm nh·ªØng m√≥n ƒÉn m√¨nh y√™u th√≠ch, tham kh·∫£o chi ti·∫øt h√†m l∆∞·ª£ng dinh d∆∞·ª°ng c·ªßa m√≥n ƒÉn ƒë√≥. ƒê·∫∑c bi·ªát, NutriHome h∆∞·ªõng d·∫´n c√°c b·∫°n n·∫•u ƒÉn m·ªôt c√°ch t·ªâ m·ªâ v√† chi ti·∫øt th√¥ng qu√° t·ª´ng b∆∞·ªõc.")

    st.text("")
    
    with st.container(border=True):
        col1, col2 = st.columns([0.4, 0.6], vertical_alignment="center")

        with col1:
            st.image("features_images/history.jpg")

        with col2:
            st.write("**History**")
            st.write("B·∫°n c√≥ th·ªÉ xem l·∫°i l·ªãch s·ª≠ ƒÉn u·ªëng c·ªßa b·∫£n th√¢n trong 3 ng√†y v·ª´a qua. T·∫°i ƒë√¢y NutriHome s·∫Ω t√≠nh to√°n chi ti·∫øt h√†m l∆∞·ª£ng m√† c√°c b·∫°n ƒë√£ h·∫•p th·ª•, ƒë∆∞a ra nh·ªØng th√¥ng s·ªë c·ª• th·ªÉ ƒë·ªÉ c√°c b·∫°n c√≥ th·ªÉ tham kh·∫£o m·ªôt c√°ch tr·ª±c quan nh·∫•t.")

    st.text("")
    
    with st.container(border=True):
        col1, col2 = st.columns([0.6, 0.4], vertical_alignment="center")

        with col2:
            st.image("features_images/community.jpg")

        with col1:
            st.write("**Community**")
            st.write("ƒê√¢y l√† m·ªôt c·ªông ƒë·ªìng, n∆°i c√°c b·∫°n c√≥ th·ªÉ chia s·∫ª cho nhau nh·ªØng m√≥n ƒÉn v√† c√¥ng th·ª©c n·∫•u ƒÉn ƒë·ªôc ƒë√°o m√† c√°c b·∫°n kh√°m ph√° ra. ƒê·ªìng th·ªùi, c√°c b·∫°n c√≥ th·ªÉ l∆∞u l·∫°i nh·ªØng c√¥ng th·ª©c m√† c√°c b·∫°n y√™u th√≠ch ho·∫∑c t√¢m ƒë·∫Øc.")